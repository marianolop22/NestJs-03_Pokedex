name: Auto Update Changelog

on:
  push:
    branches: [ main, master ]

jobs:
  update-changelog:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.token }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Generate Enhanced Changelog
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          
          # Get repository URL for links
          REPO_URL=$(git config --get remote.origin.url)
          # Convert SSH to HTTPS if necessary
          if [[ $REPO_URL == git@github.com:* ]]; then
            REPO_URL="https://github.com/${REPO_URL#git@github.com:}"
            REPO_URL="${REPO_URL%.git}"
          elif [[ $REPO_URL == https://github.com/* ]]; then
            REPO_URL="${REPO_URL%.git}"
          fi
          
          # Always regenerate entry for current version to include latest commits
          echo "Updating changelog for version $CURRENT_VERSION..."
          
          # Create temporary file for new entry
          echo "## [v$CURRENT_VERSION] - $(date '+%Y-%m-%d')" > temp_changelog.md
          echo "" >> temp_changelog.md
          
          # Find last commit that changed package.json (previous version)
          LAST_VERSION_COMMIT=$(git log -n 2 --pretty=format:"%H" -- package.json | tail -n 1 2>/dev/null || echo "")
          
          if [ -n "$LAST_VERSION_COMMIT" ]; then
            # Commits since last version change (message|hash)
            COMMITS=$(git log --oneline --pretty=format:"%s|%h" $LAST_VERSION_COMMIT..HEAD | grep -v "docs: auto-update CHANGELOG")
            
            if [ -n "$COMMITS" ]; then
              echo "### Changes:" >> temp_changelog.md
              echo "$COMMITS" | while IFS='|' read -r commit hash; do
                # Check if this is a squash merge commit (contains PR number)
                if [[ $commit =~ \(#([0-9]+)\)$ ]]; then
                  PR_NUMBER="${BASH_REMATCH[1]}"
                  echo "Found PR #$PR_NUMBER for commit $hash"
                  
                  # Get PR title using GitHub API
                  PR_TITLE=$(curl -s -H "Authorization: Bearer $token" \
                    "https://api.github.com/repos/$GITHUB_REPOSITORY/pulls/$PR_NUMBER" | \
                    python3 -c "import sys, json; print(json.load(sys.stdin)['title'])" 2>/dev/null || echo "")
                  
                  if [ -n "$PR_TITLE" ]; then
                    # Use PR title instead of commit message
                    DISPLAY_MESSAGE="$PR_TITLE"
                    echo "Using PR title: $PR_TITLE"
                  else
                    # Fallback to commit message
                    DISPLAY_MESSAGE="$commit"
                    echo "Fallback to commit message: $commit"
                  fi
                else
                  # Regular commit, use commit message
                  DISPLAY_MESSAGE="$commit"
                fi
                
                # Create commit link
                COMMIT_LINK="[$hash]($REPO_URL/commit/$hash)"
                
                # Categorize commits
                if echo "$DISPLAY_MESSAGE" | grep -qi "^feat\|feature\|new.*feature"; then
                  echo "- ⭐️ $DISPLAY_MESSAGE ($COMMIT_LINK)" >> temp_changelog.md
                elif echo "$DISPLAY_MESSAGE" | grep -qi "^fix\|bug.*fix\|hotfix"; then
                  echo "- 🔧 $DISPLAY_MESSAGE ($COMMIT_LINK)" >> temp_changelog.md
                elif echo "$DISPLAY_MESSAGE" | grep -qi "^docs\|documentation"; then
                  echo "- 📝 $DISPLAY_MESSAGE ($COMMIT_LINK)" >> temp_changelog.md
                elif echo "$DISPLAY_MESSAGE" | grep -qi "^style\|styling"; then
                  echo "- 🧬 $DISPLAY_MESSAGE ($COMMIT_LINK)" >> temp_changelog.md
                elif echo "$DISPLAY_MESSAGE" | grep -qi "^refactor\|refactoring"; then
                  echo "- ♻️ $DISPLAY_MESSAGE ($COMMIT_LINK)" >> temp_changelog.md
                elif echo "$DISPLAY_MESSAGE" | grep -qi "^test\|testing"; then
                  echo "- ✅ $DISPLAY_MESSAGE ($COMMIT_LINK)" >> temp_changelog.md
                elif echo "$DISPLAY_MESSAGE" | grep -qi "^perf\|performance"; then
                  echo "- ⚡ $DISPLAY_MESSAGE ($COMMIT_LINK)" >> temp_changelog.md
                else
                  echo "- 🚀 $DISPLAY_MESSAGE ($COMMIT_LINK)" >> temp_changelog.md
                fi
              done
            else
              echo "- No changes since last version" >> temp_changelog.md
            fi
          else
            echo "### Initial version:" >> temp_changelog.md
            git log --oneline --pretty=format:"%s|%h" | head -10 | while IFS='|' read -r commit hash; do
              COMMIT_LINK="[$hash]($REPO_URL/commit/$hash)"
              echo "- 🔧 $commit ($COMMIT_LINK)" >> temp_changelog.md
            done
          fi
          
          echo "" >> temp_changelog.md
          echo "---" >> temp_changelog.md
          echo "" >> temp_changelog.md
          
          # Handle CHANGELOG.md file creation/update
          if [ -f CHANGELOG.md ]; then
            # Check if this version already exists
            if grep -q "## \[v$CURRENT_VERSION\]" CHANGELOG.md; then
              echo "Replacing existing entry for version $CURRENT_VERSION"
              
              # Create temp file with everything except the current version entry
              awk -v version="v$CURRENT_VERSION" '
                BEGIN { skip = 0 }
                /^## \[/ { 
                  if ($0 ~ "\\[" version "\\]") {
                    skip = 1
                    next
                  } else if (skip == 1) {
                    skip = 0
                  }
                }
                /^---$/ && skip == 1 { next }
                skip == 0 { print }
              ' CHANGELOG.md > temp_existing.md
              
              # Combine: header + new entry + rest of changelog
              if grep -q "# Changelog" temp_existing.md; then
                # Insert new entry after header
                sed '/^# Changelog/,/^$/{ /^$/r temp_changelog.md
                }' temp_existing.md > final_changelog.md
              else
                echo "# Changelog" > final_changelog.md
                echo "" >> final_changelog.md
                echo "All versions and project changes." >> final_changelog.md
                echo "" >> final_changelog.md
                cat temp_changelog.md >> final_changelog.md
                cat temp_existing.md >> final_changelog.md
              fi
              
              rm -f temp_existing.md
            else
              echo "Adding new entry for version $CURRENT_VERSION"
              # Version doesn't exist, add at the beginning
              if grep -q "# Changelog" CHANGELOG.md; then
                sed '/^# Changelog/,/^$/{ /^$/r temp_changelog.md
                }' CHANGELOG.md > final_changelog.md
              else
                echo "# Changelog" > final_changelog.md
                echo "" >> final_changelog.md
                echo "All versions and project changes." >> final_changelog.md
                echo "" >> final_changelog.md
                cat temp_changelog.md >> final_changelog.md
                cat CHANGELOG.md >> final_changelog.md
              fi
            fi
          else
            echo "Creating new CHANGELOG.md file"
            # Create new file with header
            echo "# Changelog" > final_changelog.md
            echo "" >> final_changelog.md
            echo "All versions and project changes." >> final_changelog.md
            echo "" >> final_changelog.md
            cat temp_changelog.md >> final_changelog.md
          fi
          
          # Replace original file
          mv final_changelog.md CHANGELOG.md
          rm -f temp_changelog.md
      
      - name: Check for changes
        id: verify-changed-files
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Commit and push changes
        if: steps.verify-changed-files.outputs.changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md
          git commit -m "docs: auto-update CHANGELOG.md v$(node -p 'require("./package.json\").version') [skip ci]"
          git push